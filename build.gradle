buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url "https://jitpack.io" }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'gradle.plugin.com.github.johnrengelman', name: 'shadow', version: '7.1.2'

    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'cn.evolvefield.mods'
version = '1.18.2-1.8.2'

java {
    archivesBaseName = 'Bot-Connect-forge'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

minecraft {

    mappings channel: 'official', version: '1.18.2'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'botapi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    implementation.extendsFrom(shade)
}

repositories {

    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.0.19'
    //shade 'org.java-websocket:Java-WebSocket:1.5.2'
    //shade 'net.sf.json-lib:json-lib:2.4:jdk15'
    //shade 'org.xerial:sqlite-jdbc:3.36.0.3'
}

shadowJar {
    configurations = [project.configurations.shade]
    classifier ''
    //relocate 'org.java-websocket','org.botapi.java-websocket'
    //relocate 'org.xerial.sqlite-jdbc','org.xerial.botapi.sqlite-jdbc'

    finalizedBy 'reobfShadowJar'
}

artifacts {
    archives tasks.shadowJar
}

reobf {
    shadowJar {}
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    finalizedBy('reobfJar')
    manifest {
        attributes([
                "Specification-Title"     : "botapi",
                "Specification-Vendor"    : "cnlimiter",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "cnlimiter",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

